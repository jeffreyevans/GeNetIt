[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeffrey S. Evans. Author, maintainer. Melanie Murphy. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Evans JS, Murphy MA (2022). GeNetIt. R package version 0.1-5. Murphy M, Dezzani R, Polliod D, Storfer (2010). “Landscape genetics high mountain frog metapopulations.” Molecular Ecology, 17(19), 3634-3649.","code":"@Manual{,   title = {GeNetIt},   author = {Jeffrey S. Evans and Melanie A. Murphy},   year = {2022},   note = {R package version 0.1-5},   keywords = {GeNetIt-package}, } @Article{,   author = {M.A. Murphy and R. Dezzani and D.S. Polliod and A.S. Storfer},   title = {Landscape genetics of high mountain frog metapopulations},   journal = {Molecular Ecology},   number = {19},   volume = {17},   pages = {3634-3649},   year = {2010},   keywords = {gravity model}, }"},{"path":"/index.html","id":"genetit-cran-01-4-development-01-5-","dir":"","previous_headings":"","what":"Spatial Graph-Theoretic Genetic Gravity Modelling","title":"Spatial Graph-Theoretic Genetic Gravity Modelling","text":"GeNetIt R package spatial graph-theoretic gravity modeling. model framework applicable types matrix-based spatial flow (-) problems. Includes functions constructing spatial graphs, sampling, summarizing associated raster variables building unconstrained singly constrained gravity models following Murphy et al., (2010).","code":""},{"path":"/index.html","id":"available-functions-in-genetit-01-5-are","dir":"","previous_headings":"","what":"Available functions in GeNetIt 0.1-5 are:","title":"Spatial Graph-Theoretic Genetic Gravity Modelling","text":"Bugs: Users encouraged report bugs . Go issues menu , press new issue start new bug report, documentation correction feature request. can direct questions jeffrey_evans@tnc.org. install GeNetIt R use install.packages() download curent stable release CRAN , development version, run following (requires remotes package): remotes::install_github(\"jeffreyevans/GeNetIt\")","code":""},{"path":"/reference/area.graph.statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistics for edges (lines) based on a defined scale (area). — area.graph.statistics","title":"Statistics for edges (lines) based on a defined scale (area). — area.graph.statistics","text":"Samples rasters edge calculates specified               statistics buffer distance","code":""},{"path":"/reference/area.graph.statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistics for edges (lines) based on a defined scale (area). — area.graph.statistics","text":"","code":"area.graph.statistics(...)"},{"path":"/reference/area.graph.statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistics for edges (lines) based on a defined scale (area). — area.graph.statistics","text":"... Parameters passed modern version function","code":""},{"path":"/reference/area.graph.statistics.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Statistics for edges (lines) based on a defined scale (area). — area.graph.statistics","text":"Please note function deprecated, please use graph.statistics        buffer argument.","code":""},{"path":"/reference/build.node.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Build node data — build.node.data","title":"Build node data — build.node.data","text":"Helper function build origin/destination node data structure.","code":""},{"path":"/reference/build.node.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build node data — build.node.data","text":"","code":"build.node.data(x, group.ids, from.parms, to.parms = NULL)"},{"path":"/reference/build.node.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build node data — build.node.data","text":"x data.frame containing node (site) data group.ids Character vector unique identifier can used join  graph .parms Character vector independent \"\" variables .parms Character vector independent \"\" variables. NULL  .parms","code":""},{"path":"/reference/build.node.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build node data — build.node.data","text":"data.frame","code":""},{"path":"/reference/build.node.data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Build node data — build.node.data","text":"Unless different set parameters used destination ()  need define argument \".parms\" \".parm\" used  define set parameters. resulting data.frame represents origin () destination () data  structure use gravity model. node structure also know  gravity literature producer () attractor ().","code":""},{"path":"/reference/build.node.data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build node data — build.node.data","text":"Jeffrey S. Evans  <jeffrey_evans@tnc.org>          Melanie Murphy <melanie.murphy@uwyo.edu>","code":""},{"path":"/reference/build.node.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build node data — build.node.data","text":"","code":"data(ralu.site)  # Build from/to site (node) level data structure  site.parms = c(\"AREA_m2\", \"PERI_m\", \"Depth_m\", \"TDS\") site <- build.node.data(ralu.site@data, group.ids = c(\"SiteName\"),                          from.parms = site.parms )"},{"path":"/reference/compare.models.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare gravity models — compare.models","title":"Compare gravity models — compare.models","text":"Prints diagnostic statistics comparing gravity models","code":""},{"path":"/reference/compare.models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare gravity models — compare.models","text":"","code":"compare.models(...)"},{"path":"/reference/compare.models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare gravity models — compare.models","text":"... gravity model objects","code":""},{"path":"/reference/compare.models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare gravity models — compare.models","text":"data.frame competing model statistics","code":""},{"path":"/reference/compare.models.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare gravity models — compare.models","text":"Results include model name, AIX, BIC, log likelihood, RMSE number parameters","code":""},{"path":"/reference/compare.models.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compare gravity models — compare.models","text":"Murphy M.., R. Dezzani, D.S. Pilliod & .S. Storfer (2010) Landscape genetics    high mountain frog metapopulations. Molecular Ecology 19(17):3634-3649","code":""},{"path":"/reference/compare.models.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compare gravity models — compare.models","text":"Jeffrey S. Evans  <jeffrey_evans@tnc.org>          Melanie Murphy <melanie.murphy@uwyo.edu>","code":""},{"path":"/reference/compare.models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare gravity models — compare.models","text":"","code":"library(nlme)   data(ralu.model)  x = c(\"DEPTH_F\", \"HLI_F\", \"CTI_F\", \"cti\", \"ffp\") ( null <-  gravity(y = \"DPS\", x = c(\"DISTANCE\"), d = \"DISTANCE\",                      group = \"FROM_SITE\", data = ralu.model, method = \"ML\") ) #> [1] \"Running singly-constrained gravity model\" #> Gravity model #>  #> Linear mixed-effects model fit by maximum likelihood #>   Data: gdata  #>        AIC      BIC    logLik #>   147.8554 160.8435 -69.92771 #>  #> Random effects: #>  Formula: DPS ~ 1 | FROM_SITE #>         (Intercept) Residual #> StdDev:   0.2253749 0.322054 #>  #> Fixed effects:  list(fmla)  #>                 Value Std.Error  DF   t-value p-value #> (Intercept) -7.121431 0.5066834 170 -14.05499       0 #> DISTANCE     2.998488 0.2498146 170  12.00285       0 #>  Correlation:  #>          (Intr) #> DISTANCE -0.993 #>  #> Standardized Within-Group Residuals: #>         Min          Q1         Med          Q3         Max  #> -2.57735678 -0.46835099  0.02307467  0.53670928  4.08683879  #>  #> Number of Observations: 190 #> Number of Groups: 19   ( gm_h1 <- gravity(y = \"DPS\", x = x, d = \"DISTANCE\", group = \"FROM_SITE\",                     data = ralu.model, ln = FALSE, method=\"ML\") )  #> [1] \"Running singly-constrained gravity model\" #> Gravity model #>  #> Linear mixed-effects model fit by maximum likelihood #>   Data: gdata  #>         AIC       BIC   logLik #>   -317.4501 -288.2269 167.7251 #>  #> Random effects: #>  Formula: DPS ~ 1 | FROM_SITE #>          (Intercept)  Residual #> StdDev: 4.272312e-06 0.1000883 #>  #> Fixed effects:  list(fmla)  #>                 Value Std.Error  DF   t-value p-value #> (Intercept) -5.686747 1.3572522 168 -4.189897  0.0000 #> DEPTH_F      0.024955 0.0084366  15  2.957913  0.0098 #> HLI_F        0.143313 0.1152750  15  1.243231  0.2329 #> CTI_F       -0.041094 0.0344335  15 -1.193421  0.2512 #> cti         -0.207845 0.0872875 168 -2.381153  0.0184 #> ffp          0.887468 0.1349335 168  6.577078  0.0000 #> DISTANCE    -0.108297 0.0116966 168 -9.258849  0.0000 #>  Correlation:  #>          (Intr) DEPTH_ HLI_F  CTI_F  cti    ffp    #> DEPTH_F  -0.551                                    #> HLI_F    -0.799  0.825                             #> CTI_F     0.327 -0.688 -0.601                      #> cti      -0.052  0.030  0.035 -0.121               #> ffp      -0.810  0.112  0.327  0.015 -0.170        #> DISTANCE -0.239  0.052  0.104 -0.068  0.477  0.096 #>  #> Standardized Within-Group Residuals: #>         Min          Q1         Med          Q3         Max  #> -3.34870862 -0.48867952  0.05250707  0.71933557  1.90749847  #>  #> Number of Observations: 190 #> Number of Groups: 19  ( gm_h2 <- gravity(y = \"DPS\", x = x[1:3], d = \"DISTANCE\", group = \"FROM_SITE\",                     data = ralu.model, ln = FALSE, method=\"ML\") )  #> [1] \"Running singly-constrained gravity model\" #> Gravity model #>  #> Linear mixed-effects model fit by maximum likelihood #>   Data: gdata  #>         AIC       BIC   logLik #>   -282.7327 -260.0036 148.3664 #>  #> Random effects: #>  Formula: DPS ~ 1 | FROM_SITE #>         (Intercept)  Residual #> StdDev:  0.04222466 0.1060164 #>  #> Fixed effects:  list(fmla)  #>                  Value Std.Error  DF    t-value p-value #> (Intercept)  1.4255881 1.2321579 170   1.156985  0.2489 #> DEPTH_F      0.0188053 0.0129344  15   1.453897  0.1666 #> HLI_F       -0.1005778 0.1776186  15  -0.566257  0.5796 #> CTI_F       -0.0754294 0.0576861  15  -1.307582  0.2107 #> DISTANCE    -0.1217679 0.0113215 170 -10.755435  0.0000 #>  Correlation:  #>          (Intr) DEPTH_ HLI_F  CTI_F  #> DEPTH_F  -0.837                      #> HLI_F    -0.994  0.856               #> CTI_F     0.512 -0.658 -0.580        #> DISTANCE -0.120  0.035  0.050 -0.019 #>  #> Standardized Within-Group Residuals: #>        Min         Q1        Med         Q3        Max  #> -3.2715302 -0.3880105  0.1618592  0.6340698  1.6117777  #>  #> Number of Observations: 190 #> Number of Groups: 19  ( gm_h3 <- gravity(y = \"DPS\", x = x[c(4:5)], d = \"DISTANCE\", group = \"FROM_SITE\",                     data = ralu.model, ln = FALSE, method=\"ML\") )  #> [1] \"Running singly-constrained gravity model\" #> Gravity model #>  #> Linear mixed-effects model fit by maximum likelihood #>   Data: gdata  #>         AIC       BIC   logLik #>   -311.3569 -291.8747 161.6784 #>  #> Random effects: #>  Formula: DPS ~ 1 | FROM_SITE #>         (Intercept)  Residual #> StdDev:  0.02690682 0.1007166 #>  #> Fixed effects:  list(fmla)  #>                 Value Std.Error  DF   t-value p-value #> (Intercept) -5.227641 0.8743817 168 -5.978672  0.0000 #> cti         -0.187006 0.0876307 168 -2.134025  0.0343 #> ffp          0.964833 0.1377737 168  7.003025  0.0000 #> DISTANCE    -0.109746 0.0120999 168 -9.069984  0.0000 #>  Correlation:  #>          (Intr) cti    ffp    #> cti      -0.062               #> ffp      -0.971 -0.162        #> DISTANCE -0.321  0.451  0.139 #>  #> Standardized Within-Group Residuals: #>         Min          Q1         Med          Q3         Max  #> -2.97220468 -0.52808527  0.05804336  0.64917339  2.01928425  #>  #> Number of Observations: 190 #> Number of Groups: 19   compare.models(null, gm_h1, gm_h2, gm_h3) #>   model       AIC       BIC log.likelihood   RMSE nparms   deltaAIC   deltaBIC #> 1  null  147.8554  160.8435      -69.92771 0.8232      0 465.305570 452.718250 #> 2 gm_h1 -317.4501 -288.2269      167.72507 0.1001      6   0.000000   3.647801 #> 3 gm_h2 -282.7327 -260.0036      148.36637 0.1083      4  34.717410  31.871163 #> 4 gm_h3 -311.3569 -291.8747      161.67844 0.1015      3   6.093271   0.000000"},{"path":"/reference/dmatrix.df.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance matrix to data.frame — dmatrix.df","title":"Distance matrix to data.frame — dmatrix.df","text":"Coerces distance matrix data.frame object","code":""},{"path":"/reference/dmatrix.df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance matrix to data.frame — dmatrix.df","text":"","code":"dmatrix.df(x, rm.diag = TRUE)"},{"path":"/reference/dmatrix.df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance matrix to data.frame — dmatrix.df","text":"x Symmetrical distance matrix rm.diag (TRUE/FALSE) remove matrix diagonal, self values.","code":""},{"path":"/reference/dmatrix.df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance matrix to data.frame — dmatrix.df","text":"data.frame object representing values","code":""},{"path":"/reference/dmatrix.df.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Distance matrix to data.frame — dmatrix.df","text":"Function results data.frame object \"X1\" (), \"X2\" ()  \"distance\" columns. column represents origin ID, represents  destination ID distance associated matrix distance.  results can joined back graph object using either origin  destination ID's.","code":""},{"path":"/reference/dmatrix.df.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Distance matrix to data.frame — dmatrix.df","text":"Jeffrey S. Evans  <jeffrey_evans@tnc.org>          Melanie Murphy <melanie.murphy@uwyo.edu>","code":""},{"path":"/reference/dmatrix.df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance matrix to data.frame — dmatrix.df","text":"","code":"library(sp)  pts <- cbind(x=runif(15, 480933, 504250), y=runif(15, 4479433, 4535122))    pts <- SpatialPointsDataFrame(pts,              data.frame(ID=paste(\"ob\",1:nrow(pts),sep=\"\")))    # Create distance matrix    dm <- spDists(pts, pts)      colnames(dm) <- pts@data[,\"ID\"]     rownames(dm) <- pts@data[,\"ID\"]    # Coerce to data.frame with TO and FROM ID's and associated distance  dm.df <- dmatrix.df(dm)    head(dm.df) #>    X1  X2  distance #> 2 ob2 ob1 41956.941 #> 3 ob3 ob1  9321.240 #> 4 ob4 ob1 41798.056 #> 5 ob5 ob1  8060.958 #> 6 ob6 ob1  4955.728 #> 7 ob7 ob1 36720.629"},{"path":"/reference/dps.html","id":null,"dir":"Reference","previous_headings":"","what":"dps genetic distance matrix for Columbia spotted frog (Rana luteiventris) — dps","title":"dps genetic distance matrix for Columbia spotted frog (Rana luteiventris) — dps","text":"Subset data used Murphy et al., (2010)","code":""},{"path":"/reference/dps.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"dps genetic distance matrix for Columbia spotted frog (Rana luteiventris) — dps","text":"29 x 29 genetic distance matrix:","code":""},{"path":"/reference/dps.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"dps genetic distance matrix for Columbia spotted frog (Rana luteiventris) — dps","text":"Murphy M.., R. Dezzani, D.S. Pilliod & .S. Storfer (2010) Landscape genetics high mountain frog metapopulations. Molecular Ecology 19(17):3634-3649","code":""},{"path":"/reference/flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert distance to flow — flow","title":"Convert distance to flow — flow","text":"Converts distance flow (1-d) without data standardization","code":""},{"path":"/reference/flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert distance to flow — flow","text":"","code":"flow(x, standardize = FALSE, rm.na = FALSE, diag.value = NA)"},{"path":"/reference/flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert distance to flow — flow","text":"x numeric vector matrix object representing distances standardize (FALSE/TRUE) Row-standardize data calculating flow rm.na (TRUE/FALSE) NA's removed, FALSE (default)  retained results diag.value x matrix, diagonal matrix values  used (default NA)","code":""},{"path":"/reference/flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert distance to flow — flow","text":"vector matrix representing flow values","code":""},{"path":"/reference/flow.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert distance to flow — flow","text":"Jeffrey S. Evans  <jeffrey_evans@tnc.org>          Melanie Murphy <melanie.murphy@uwyo.edu>","code":""},{"path":"/reference/flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert distance to flow — flow","text":"","code":"#### On a distance vector flow(runif(10,0,1)) #>  [1] 0.7268075 0.5488415 0.4287697 0.1518176 0.5110128 0.2171573 0.9202677 #>  [8] 0.5272584 0.3568629 0.4863376 flow(runif(10,0,500), standardize = TRUE) #>  [1] 0.3079739 0.0000000 0.6462643 0.8721362 0.9702158 0.2401962 0.1183463 #>  [8] 0.9360193 0.6531457 0.6218977  # With NA's d <- runif(10, 0,1)   d[2] <- NA flow(d) #>  [1] 0.15568421         NA 0.83909585 0.05089540 0.90203950 0.03846531 #>  [7] 0.98897863 0.19811391 0.72704194 0.94110503 flow(d, rm.na=TRUE) #> [1] 0.15568421 0.83909585 0.05089540 0.90203950 0.03846531 0.98897863 0.19811391 #> [8] 0.72704194 0.94110503  #### On a distance matrix dm <- as.matrix(dist(runif(5,0,1), diag = TRUE, upper = TRUE)) flow(dm) #>           1         2         3         4         5 #> 1        NA 0.7200527 0.9725967 0.8575226 0.4853579 #> 2 0.7200527        NA 0.7474559 0.5775752 0.2054106 #> 3 0.9725967 0.7474559        NA 0.8301193 0.4579547 #> 4 0.8575226 0.5775752 0.8301193        NA 0.6278354 #> 5 0.4853579 0.2054106 0.4579547 0.6278354        NA"},{"path":"/reference/graph.statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistics for edges (lines) — graph.statistics","title":"Statistics for edges (lines) — graph.statistics","text":"Extracts raster values edge calculates specified statistics","code":""},{"path":"/reference/graph.statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistics for edges (lines) — graph.statistics","text":"","code":"graph.statistics(x, r, stats = c(\"min\", \"mean\", \"max\"), buffer = NULL)"},{"path":"/reference/graph.statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistics for edges (lines) — graph.statistics","text":"x sp SpatialLinesDataFrame sf LINE object r terra SpatRast raster rasterLayer, rasterStack, rasterBrick object stats Statistics calculate. vectorized, can pass custom  statistic function. buffer Buffer distance, radius projection units. statistics  based edge buffer distance","code":""},{"path":"/reference/graph.statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistics for edges (lines) — graph.statistics","text":"data.frame object statistics","code":""},{"path":"/reference/graph.statistics.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Statistics for edges (lines) — graph.statistics","text":"buffer argument specified , raster values within specified  buffer radius extracted included derived statistic(s). Else-wise, statistics derived raster values directly intersect edge.","code":""},{"path":"/reference/graph.statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistics for edges (lines) — graph.statistics","text":"","code":"# \\donttest{  library(sp)  library(sf) #> Linking to GEOS 3.9.1, GDAL 3.2.1, PROJ 7.2.1; sf_use_s2() is TRUE  library(raster) #>  #> Attaching package: 'raster' #> The following object is masked from 'package:nlme': #>  #>     getData  library(terra)   #> terra 1.5.17    data(rasters)    data(ralu.site)   xvars <- rast(stack(rasters))  ralu.site <- as(ralu.site, \"sf\")     dist.graph <- knn.graph(ralu.site, row.names = ralu.site$SiteName,                            max.dist = 1500)                  str(dist.graph@data) #> Error in str(dist.graph@data): trying to get slot \"data\" from an object (class \"sf\") that is not an S4 object       skew <- function(x, na.rm = TRUE) {              if (na.rm) x <- x[!is.na(x)]            sum( (x - mean(x)) ^ 3) / ( length(x) * sd(x) ^ 3 )        }  # Moments on continuous raster data  system.time( {       stats <- graph.statistics(dist.graph, r = xvars[[-6]],                 stats = c(\"min\", \"median\", \"max\", \"var\", \"skew\"))   } )  #> Error in get(as.character(FUN), mode = \"function\", envir = envir): object 'skew' of mode 'function' was not found #> Timing stopped at: 0.11 0 0.13  # Proportional function on nominal raster data     p <- function(x) { length(x[x < 52]) / length(x) }        system.time( {        nstats <- graph.statistics(dist.graph, r = xvars[[6]],                stats = \"p\")    } )    #> Error in get(as.character(FUN), mode = \"function\", envir = envir): object 'p' of mode 'function' was not found #> Timing stopped at: 0.15 0 0.16  # Based on 500m buffer distance around line(s)  system.time( {       stats <- graph.statistics(dist.graph, r = xvars[[-6]],                 stats = c(\"min\", \"median\", \"max\", \"var\", \"skew\"),             buffer = 500)   } ) #> Using 500 distance for statistics #> Error in get(as.character(FUN), mode = \"function\", envir = envir): object 'skew' of mode 'function' was not found #> Timing stopped at: 0.45 0 0.48   dist.graph@data <- data.frame(dist.graph@data, stats, nstats) #> Error in data.frame(dist.graph@data, stats, nstats): trying to get slot \"data\" from an object (class \"sf\") that is not an S4 object     str(dist.graph@data) #> Error in str(dist.graph@data): trying to get slot \"data\" from an object (class \"sf\") that is not an S4 object  # }"},{"path":"/reference/gravity.es.html","id":null,"dir":"Reference","previous_headings":"","what":"Effect Size — gravity.es","title":"Effect Size — gravity.es","text":"Cohen's D effect size gravity models","code":""},{"path":"/reference/gravity.es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Effect Size — gravity.es","text":"","code":"gravity.es(x, actual.n = FALSE, alpha = 0.95)"},{"path":"/reference/gravity.es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Effect Size — gravity.es","text":"x gravity model object actual.n (FALSE/TRUE) Use actual N degrees freedom  calculating Confidence Interval alpha confidence interval","code":""},{"path":"/reference/gravity.es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Effect Size — gravity.es","text":"data.frame parameter effect size","code":""},{"path":"/reference/gravity.es.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Effect Size — gravity.es","text":"Calculate Cohen's D statistic effect gravity model object","code":""},{"path":"/reference/gravity.es.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Effect Size — gravity.es","text":"Murphy M.., R. Dezzani, D.S. Pilliod & .S. Storfer (2010) Landscape genetics    high mountain frog metapopulations. Molecular Ecology 19(17):3634-3649 Cohen, J. (1988) Statistical power behavioral sciences (2nd ed.).    Hillsdale, NJ: Erlbaum","code":""},{"path":"/reference/gravity.es.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Effect Size — gravity.es","text":"Jeffrey S. Evans  <jeffrey_evans@tnc.org>          Melanie Murphy <melanie.murphy@uwyo.edu>","code":""},{"path":"/reference/gravity.es.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Effect Size — gravity.es","text":"","code":"library(nlme)   data(ralu.model)  x = c(\"DEPTH_F\", \"HLI_F\", \"CTI_F\", \"cti\", \"ffp\") gm_h1 <- gravity(y = \"DPS\", x = x, d = \"DISTANCE\", group = \"FROM_SITE\",                  data = ralu.model, ln = FALSE, method=\"ML\")  #> [1] \"Running singly-constrained gravity model\"  gravity.es(gm_h1) #>            t.value  df    cohen.d  p.value     low.ci      up.ci #> DEPTH_F   2.957913  15  1.5274596 0.009775  0.6404823  2.4144368 #> HLI_F     1.243231  15  0.6420016 0.232865 -0.1533054  1.4373086 #> CTI_F    -1.193421  15 -0.6162801 0.251239 -1.4099520  0.1773917 #> cti      -2.381153 168 -0.3674198 0.018378 -0.5845083 -0.1503314 #> ffp       6.577078 168  1.0148652 0.000000  0.7860803  1.2436502 #> DISTANCE -9.258849 168 -1.4286714 0.000000 -1.6699903 -1.1873525"},{"path":"/reference/gravity.html","id":null,"dir":"Reference","previous_headings":"","what":"Gravity model — gravity","title":"Gravity model — gravity","text":"Implements Murphy et al., (2010) gravity model","code":""},{"path":"/reference/gravity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gravity model — gravity","text":"","code":"gravity(y, x, d, group, data, ln = TRUE, constrained = TRUE, ...)"},{"path":"/reference/gravity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gravity model — gravity","text":"y Name dependent variable x Character vector independent variables d Name column containing distance group Name grouping column () data data.frame object containing model data ln Natural log transform data (TRUE/FALSE) constrained Specify constrained model, FALSE linear model (lm)  run (TRUE/FALSE) ... Additional argument passed nlme lm","code":""},{"path":"/reference/gravity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gravity model — gravity","text":"formula           Model formula call fixed.formula     Model formula fixed effects random.formula    Model formula random (group) effects                            (constrained models) gravity           Gravity model fit               Model Fitted Values AIC               AIC value selected model RMSE              Root Mean Squared Error (based bias corrected back transform) log.likelihood    Restricted log-likelihood convergence group.names       Column name grouping variable groups            Values grouping variable x                 data.frame x variables y                 Vector y variable constrained       TRUE/FALSE indicating model constrained","code":""},{"path":"/reference/gravity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gravity model — gravity","text":"\"group\" factor defines singly constrained direction ()  grouping structure origins. specify null (distance IBD)  model just omit x argument. default constrained models fit maximizing restricted log-likelihood  (REML), maximum likelihood use type=\"ML\" argument passed  lme function. ln=TRUE input data log transformed","code":""},{"path":"/reference/gravity.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Gravity model — gravity","text":"Depends: nlme, lattice","code":""},{"path":"/reference/gravity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gravity model — gravity","text":"Murphy, M. . & J.S. Evans. (prep). GenNetIt: graph theoretical gravity modeling    landscape genetics Murphy M.., R. Dezzani, D.S. Pilliod & .S. Storfer (2010) Landscape genetics    high mountain frog metapopulations. Molecular Ecology 19(17):3634-3649","code":""},{"path":[]},{"path":"/reference/gravity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gravity model — gravity","text":"Jeffrey S. Evans  <jeffrey_evans@tnc.org>          Melanie Murphy <melanie.murphy@uwyo.edu>","code":""},{"path":"/reference/gravity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gravity model — gravity","text":"","code":"library(nlme) data(ralu.model)  # Gravity model   x = c(\"DEPTH_F\", \"HLI_F\", \"CTI_F\", \"cti\", \"ffp\") ( gm <- gravity(y = \"DPS\", x = x, d = \"DISTANCE\", group = \"FROM_SITE\",                  data = ralu.model, ln = FALSE) ) #> [1] \"Running singly-constrained gravity model\" #> Gravity model #>  #> Linear mixed-effects model fit by REML #>   Data: gdata  #>         AIC       BIC   logLik #>   -280.1398 -251.2545 149.0699 #>  #> Random effects: #>  Formula: DPS ~ 1 | FROM_SITE #>         (Intercept)  Residual #> StdDev:  0.01875411 0.1007295 #>  #> Fixed effects:  list(fmla)  #>                 Value Std.Error  DF   t-value p-value #> (Intercept) -5.926103 1.4920658 168 -3.971744  0.0001 #> DEPTH_F      0.025633 0.0094633  15  2.708728  0.0162 #> HLI_F        0.156871 0.1316072  15  1.191962  0.2518 #> CTI_F       -0.048095 0.0401198  15 -1.198791  0.2492 #> cti         -0.197073 0.0869938 168 -2.265362  0.0248 #> ffp          0.910712 0.1430268 168  6.367426  0.0000 #> DISTANCE    -0.109680 0.0118781 168 -9.233851  0.0000 #>  Correlation:  #>          (Intr) DEPTH_ HLI_F  CTI_F  cti    ffp    #> DEPTH_F  -0.579                                    #> HLI_F    -0.812  0.833                             #> CTI_F     0.329 -0.674 -0.583                      #> cti      -0.050  0.028  0.035 -0.115               #> ffp      -0.797  0.124  0.321  0.009 -0.159        #> DISTANCE -0.270  0.066  0.125 -0.072  0.461  0.145 #>  #> Standardized Within-Group Residuals: #>         Min          Q1         Med          Q3         Max  #> -3.19045601 -0.46459488  0.01573003  0.66508837  1.87341262  #>  #> Number of Observations: 190 #> Number of Groups: 19   #' # Plot gravity results  par(mfrow=c(2,3))    for (i in 1:6) { plot(gm, type=i) }    # log likelihood of competing models   x = c(\"DEPTH_F\", \"HLI_F\", \"CTI_F\", \"cti\", \"ffp\")  for(i in x[-1]) {    x1 = c(x[1], x[-which(x %in% i)])      ll <- gravity(y = \"DPS\", x = x1, d = \"DISTANCE\", group = \"FROM_SITE\",                   data = ralu.model, ln = FALSE)$log.likelihood   cat(\"log likelihood for parameter set:\", \"(\",x1,\")\", \"=\", ll, \"\\n\")   } #> [1] \"Running singly-constrained gravity model\" #> log likelihood for parameter set: ( DEPTH_F DEPTH_F CTI_F cti ffp ) = 149.4722  #> [1] \"Running singly-constrained gravity model\" #> log likelihood for parameter set: ( DEPTH_F DEPTH_F HLI_F cti ffp ) = 150.6738  #> [1] \"Running singly-constrained gravity model\" #> log likelihood for parameter set: ( DEPTH_F DEPTH_F HLI_F CTI_F ffp ) = 148.0972  #> [1] \"Running singly-constrained gravity model\" #> log likelihood for parameter set: ( DEPTH_F DEPTH_F HLI_F CTI_F cti ) = 133.9164   # Distance only (IBD) model gravity(y = \"DPS\", d = \"DISTANCE\", group = \"FROM_SITE\",          data = ralu.model, ln = FALSE) #> [1] \"Running singly-constrained gravity model\" #> Gravity model #>  #> Linear mixed-effects model fit by REML #>   Data: gdata  #>         AIC       BIC   logLik #>   -264.6706 -251.7248 136.3353 #>  #> Random effects: #>  Formula: DPS ~ 1 | FROM_SITE #>         (Intercept)  Residual #> StdDev:  0.08183053 0.1047401 #>  #> Fixed effects:  list(fmla)  #>                  Value  Std.Error  DF    t-value p-value #> (Intercept)  0.6020489 0.08814025 170   6.830579       0 #> DISTANCE    -0.1295575 0.01137055 170 -11.394132       0 #>  Correlation:  #>          (Intr) #> DISTANCE -0.971 #>  #> Standardized Within-Group Residuals: #>        Min         Q1        Med         Q3        Max  #> -3.1725334 -0.4099091  0.1452196  0.6313571  1.7663818  #>  #> Number of Observations: 190 #> Number of Groups: 19"},{"path":"/reference/knn.graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Saturated or K Nearest Neighbor Graph — knn.graph","title":"Saturated or K Nearest Neighbor Graph — knn.graph","text":"Creates kNN saturated graph SpatialLinesDataFrame object","code":""},{"path":"/reference/knn.graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saturated or K Nearest Neighbor Graph — knn.graph","text":"","code":"knn.graph(   x,   row.names = NULL,   k = NULL,   max.dist = NULL,   long.lat = FALSE,   drop.lower = FALSE,   as.sp = FALSE )"},{"path":"/reference/knn.graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saturated or K Nearest Neighbor Graph — knn.graph","text":"x sf POINTS object row.names Unique row.names assigned results k K nearest neighbors, defaults saturated (n(x) - 1) max.dist Maximum length edge (used distance constraint) long.lat (FALSE/TRUE) Coordinates longitude-latitude decimal degrees, case distances measured kilometers drop.lower (FALSE/TRUE) Drop lower triangle matrix representing duplicate edges ie, --.sp (FALSE/TRUE) Output sp class SpatialLinesDataFrame object","code":""},{"path":"/reference/knn.graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Saturated or K Nearest Neighbor Graph — knn.graph","text":"SpatialLinesDataFrame object :        Name column x (origin) index j        Name column x (destination) index from_ID  Name column x (origin) region ID to_ID    Name column x (destination) region ID length   Length edge (line) projection units kilometers projected","code":""},{"path":"/reference/knn.graph.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Saturated or K Nearest Neighbor Graph — knn.graph","text":"...","code":""},{"path":"/reference/knn.graph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Saturated or K Nearest Neighbor Graph — knn.graph","text":"Murphy, M. . & J.S. Evans. (prep). \"GenNetIt: gravity analysis R landscape genetics\" Murphy M.., R. Dezzani, D.S. Pilliod & .S. Storfer (2010) Landscape genetics high mountain frog metapopulations. Molecular Ecology 19(17):3634-3649","code":""},{"path":"/reference/knn.graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Saturated or K Nearest Neighbor Graph — knn.graph","text":"Jeffrey S. Evans  jeffrey_evans@tnc.org Melanie Murphy melanie.murphy@uwyo.edu","code":""},{"path":"/reference/knn.graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saturated or K Nearest Neighbor Graph — knn.graph","text":"","code":"library(sf)    data(ralu.site, package=\"GeNetIt\")    ralu.site <- as(ralu.site, \"sf\")   # Saturated spatial graph  sat.graph <- knn.graph(ralu.site, row.names=ralu.site$SiteName)    head(sat.graph) #> Simple feature collection with 6 features and 6 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 687938.4 ymin: 4996675 xmax: 690104 ymax: 5003207 #> CRS:           +proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs #>   i j      from_ID          to_ID wt                       geometry   length #> 1 1 2 AirplaneLake BachelorMeadow  1 LINESTRING (688816.6 500320... 4126.977 #> 2 1 3 AirplaneLake BarkingFoxLake  1 LINESTRING (688816.6 500320... 3110.794 #> 3 1 4 AirplaneLake   BirdbillLake  1 LINESTRING (688816.6 500320... 1144.150 #> 4 1 5 AirplaneLake        BobLake  1 LINESTRING (688816.6 500320... 4062.216 #> 5 1 6 AirplaneLake      CacheLake  1 LINESTRING (688816.6 500320... 5726.773 #> 6 1 7 AirplaneLake        DoeLake  1 LINESTRING (688816.6 500320... 6533.927    # Distanced constrained spatial graph  dist.graph <- knn.graph(ralu.site, row.names=ralu.site$SiteName,                           max.dist = 5000)  opar <- par(no.readonly=TRUE)  par(mfrow=c(1,2))   plot(st_geometry(sat.graph), col=\"grey\")   points(st_coordinates(ralu.site), col=\"red\", pch=20, cex=1.5)      box()      title(\"Saturated graph\")   plot(st_geometry(dist.graph), col=\"grey\")   points(st_coordinates(ralu.site), col=\"red\", pch=20, cex=1.5)      box()      title(\"Distance constrained graph\")  par(opar)"},{"path":"/reference/node.statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"raster statistics for nodes — node.statistics","title":"raster statistics for nodes — node.statistics","text":"returns raster value statistics              (based specified radius) node","code":""},{"path":"/reference/node.statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"raster statistics for nodes — node.statistics","text":"","code":"node.statistics(x, r, buffer = NULL, stats = c(\"min\", \"median\", \"max\"))"},{"path":"/reference/node.statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"raster statistics for nodes — node.statistics","text":"x sp class SpatialPointsDataFrame object r rasterLayer, rasterStack rasterBrick object buffer Buffer distance, radius projection units stats Statistics calculate. vectorized, can pass  custom statistic function.","code":""},{"path":"/reference/node.statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"raster statistics for nodes — node.statistics","text":"data.frame object -node raster values statistics","code":""},{"path":"/reference/node.statistics.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"raster statistics for nodes — node.statistics","text":"buffer specified, -node raster values returned","code":""},{"path":"/reference/node.statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"raster statistics for nodes — node.statistics","text":"","code":"# \\donttest{ library(sp) library(spdep) #> Loading required package: spData #> To access larger datasets in this package, install the spDataLarge #> package with: `install.packages('spDataLarge', #> repos='https://nowosad.github.io/drat/', type='source')` library(raster)   data(rasters)   data(ralu.site)  xvars <- stack(rasters)    skew <- function(x, na.rm = TRUE) {             if (na.rm) x <- x[!is.na(x)]           sum( (x - mean(x)) ^ 3) / ( length(x) * sd(x) ^ 3 )       }  # without buffer (values at point) system.time( {      stats <- node.statistics(ralu.site, r = xvars[[-6]],              stats = c(\"min\", \"median\", \"max\", \"var\", \"skew\"))  } ) #> At-node ([x,y] point) values being returned #>    user  system elapsed  #>    0.06    0.00    0.06   # with 1000m buffer (values around points) system.time( {      stats <- node.statistics(ralu.site, r = xvars[[-6]], buffer = 1000,                stats = c(\"min\", \"median\", \"max\", \"var\", \"skew\"))  } )  #> Using 1000 distance for statistics #> Error in get(as.character(FUN), mode = \"function\", envir = envir): object 'skew' of mode 'function' was not found #> Timing stopped at: 0.22 0 0.22 # }"},{"path":"/reference/plot.gravity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot gravity model — plot.gravity","title":"Plot gravity model — plot.gravity","text":"Diagnostic plots gravity model 6 optional plots.","code":""},{"path":"/reference/plot.gravity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot gravity model — plot.gravity","text":"","code":"# S3 method for gravity plot(x, type = 1, ...)"},{"path":"/reference/plot.gravity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot gravity model — plot.gravity","text":"x Object class gravity type Type plot (default 1, model structure ) ... Ignored","code":""},{"path":"/reference/plot.gravity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot gravity model — plot.gravity","text":"defined plot","code":""},{"path":"/reference/plot.gravity.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot gravity model — plot.gravity","text":"Plot types available: 1 - Model structure , 2 - Model structure II, 3 - Q-Q Normal - Origin random effects, 4 - Q-Q Normal - Residuals , 5 - Fitted values, 6 - Distribution observed verses predicted Depends: nlme, lattice","code":""},{"path":"/reference/plot.gravity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot gravity model — plot.gravity","text":"Murphy, M. . & J.S. Evans. (prep). \"GenNetIt: gravity analysis R landscape genetics\" Murphy M.., R. Dezzani, D.S. Pilliod & .S. Storfer (2010) Landscape genetics high mountain frog metapopulations. Molecular Ecology 19(17):3634-3649","code":""},{"path":"/reference/plot.gravity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot gravity model — plot.gravity","text":"Jeffrey S. Evans  <jeffrey_evans@tnc.org> Melanie Murphy <melanie.murphy@uwyo.edu>","code":""},{"path":"/reference/predict.gravity.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict gravity model — predict.gravity","title":"Predict gravity model — predict.gravity","text":"predict method class \"gravity\"","code":""},{"path":"/reference/predict.gravity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict gravity model — predict.gravity","text":"","code":"# S3 method for gravity predict(   object,   newdata,   groups = NULL,   back.transform = c(\"none\", \"simple\", \"Miller\", \"Naihua\"),   ... )"},{"path":"/reference/predict.gravity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict gravity model — predict.gravity","text":"object Object class gravity newdata New data used obtaining predictions, can data.frame nffGroupedData groups Grouping factor acting random effect. used, must match levels used model, otherwise leave null convert groupedData back.transform Method back transform data, default none  log predictions returned. ... Arguments passed predict.lme predict.lm","code":""},{"path":"/reference/predict.gravity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict gravity model — predict.gravity","text":"Vector model predictions","code":""},{"path":"/reference/predict.gravity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict gravity model — predict.gravity","text":"Please note entire gravity equation log transformed ,  parameter space log scale, just y. means  meaningful prediction \"newdata\" also needs log scale. back.transform argument, simple back-transform method uses  form exp(y-hat)0.5*variance whereas Miller uses exp(sigma)*05  multiplicative bias factor. Naihua regresses y~exp(y-hat) intercept  uses resulting coefficient multiplicative bias factor. Naihua method intended results non-normal errors. can check functional form simply plotting y (non-transformed) fit.     default output log scaled predictions.","code":""},{"path":"/reference/predict.gravity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict gravity model — predict.gravity","text":"Miller, D.M. (1984) Reducing Transformation Bias Curve Fitting   American Statistician. 38(2):124-126 Naihua, D. (1983) Smearing Estimate: Nonparametric Retransformation Method    Journal American Statistical Association, 78(383):605–610.","code":""},{"path":"/reference/predict.gravity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict gravity model — predict.gravity","text":"","code":"library(nlme) data(ralu.model)  back.transform <- function(y) exp(y + 0.5 * stats::var(y)) rmse = function(p, o){ sqrt(mean((p - o)^2)) }   x = c(\"DEPTH_F\", \"HLI_F\", \"CTI_F\", \"cti\", \"ffp\")   sidx <- sample(1:nrow(ralu.model), 100)    train <- ralu.model[sidx,]   test <- ralu.model[-sidx,]    # Specify constrained gravity model    ( gm <- gravity(y = \"DPS\", x = x, d = \"DISTANCE\", group = \"FROM_SITE\",                   data = train, ln = FALSE) ) #> [1] \"Running singly-constrained gravity model\" #> Gravity model #>  #> Linear mixed-effects model fit by REML #>   Data: gdata  #>        AIC       BIC logLik #>   -136.514 -113.7206 77.257 #>  #> Random effects: #>  Formula: DPS ~ 1 | FROM_SITE #>         (Intercept)   Residual #> StdDev:  0.04331721 0.09251116 #>  #> Fixed effects:  list(fmla)  #>                 Value Std.Error DF   t-value p-value #> (Intercept) -5.021556 2.2138316 79 -2.268265  0.0260 #> DEPTH_F      0.016064 0.0142664 14  1.126013  0.2791 #> HLI_F        0.057311 0.2058492 14  0.278415  0.7848 #> CTI_F       -0.056346 0.0637005 14 -0.884544  0.3913 #> cti         -0.168146 0.0981068 79 -1.713907  0.0905 #> ffp          0.897728 0.2040685 79  4.399147  0.0000 #> DISTANCE    -0.125777 0.0154870 79 -8.121503  0.0000 #>  Correlation:  #>          (Intr) DEPTH_ HLI_F  CTI_F  cti    ffp    #> DEPTH_F  -0.626                                    #> HLI_F    -0.824  0.859                             #> CTI_F     0.330 -0.656 -0.560                      #> cti      -0.024  0.050  0.012 -0.128               #> ffp      -0.777  0.129  0.301  0.003 -0.138        #> DISTANCE -0.275  0.107  0.140 -0.050  0.464  0.164 #>  #> Standardized Within-Group Residuals: #>         Min          Q1         Med          Q3         Max  #> -2.96880469 -0.49096445  0.06522563  0.53632544  1.79390405  #>  #> Number of Observations: 100 #> Number of Groups: 18     ( p <- predict(gm, test[,c(x, \"DISTANCE\")]) ) #> Making population level predictions #> Warning: the condition has length > 1 and only the first element will be used #>  [1] -0.25329785 -0.25681171 -0.32777182 -0.36893756 -0.35310797 -0.48920904 #>  [7] -0.29494511 -0.31408256 -0.32889162 -0.39437858 -0.41729481 -0.47130315 #> [13] -0.44324631 -0.48485183 -0.28427044 -0.38452308 -0.39975697 -0.47981240 #> [19] -0.53065871 -0.53769501 -0.52562637 -0.58895763 -0.59249218 -0.11374265 #> [25] -0.13735936 -0.25663483 -0.44048213 -0.39306026 -0.44350423 -0.19303334 #> [31] -0.24576525 -0.46035810 -0.44332558 -0.44598750 -0.54152098 -0.21258035 #> [37] -0.22369599 -0.39416800 -0.39778379 -0.38034004 -0.38286170 -0.47873097 #> [43] -0.32367198 -0.33458788 -0.39773901 -0.41225972 -0.42571239 -0.43933051 #> [49] -0.49059890  0.04233915 -0.30908972 -0.36161362 -0.40026709 -0.41574314 #> [55] -0.12441081 -0.20873610 -0.21948389 -0.27972325 -0.31842001 -0.29592246 #> [61] -0.35275876 -0.40787969 -0.22871113 -0.28291477 -0.26784625 -0.33924191 #> [67] -0.34477744 -0.43280251 -0.04839582 -0.16087642 -0.22765633 -0.33484413 #> [73] -0.37164905 -0.23882341 -0.36709540 -0.36564847 -0.38908496 -0.17073254 #> [79] -0.39855034 -0.42117103 -0.40857146 -0.42724038 -0.37287089 -0.38934601 #> [85] -0.43209934 -0.45592882 -0.45409103 -0.40959210 -0.45613108 -0.21846319 #> attr(,\"label\") #> [1] \"Predicted values\"   rmse(back.transform(p), back.transform(ralu.model[,\"DPS\"][-sidx])) #> [1] 0.0761695  # WIth model sigma-based back transformation ( p <- predict(gm, test[,c(x, \"DISTANCE\")], back.transform = \"simple\") ) #> Making population level predictions #> Back-transforming exp(y-hat)*0.5*variance(y-hat),  #> \t\t  assumes normally distributed errors #>  [1] 0.7815808 0.7788393 0.7254880 0.6962291 0.7073379 0.6173322 0.7496986 #>  [8] 0.7354877 0.7246761 0.6787398 0.6633625 0.6284857 0.6463687 0.6200280 #> [15] 0.7577443 0.6854622 0.6750991 0.6231604 0.5922671 0.5881143 0.5952551 #> [22] 0.5587258 0.5567544 0.8986321 0.8776580 0.7789770 0.6481579 0.6796352 #> [29] 0.6462020 0.8301306 0.7874904 0.6354023 0.6463175 0.6445993 0.5858685 #> [36] 0.8140616 0.8050629 0.6788827 0.6764325 0.6883355 0.6866019 0.6238347 #> [43] 0.7284685 0.7205599 0.6764628 0.6667110 0.6578020 0.6489047 0.6164748 #> [50] 1.0504307 0.7391691 0.7013470 0.6747548 0.6643926 0.8890963 0.8171971 #> [57] 0.8084611 0.7611977 0.7323045 0.7489663 0.7075849 0.6696376 0.8010355 #> [64] 0.7587722 0.7702924 0.7172142 0.7132550 0.6531546 0.9593160 0.8572589 #> [71] 0.8018809 0.7203753 0.6943439 0.7929760 0.6975129 0.6985229 0.6823423 #> [78] 0.8488512 0.6759141 0.6607961 0.6691746 0.6567977 0.6934960 0.6821642 #> [85] 0.6536141 0.6382229 0.6393969 0.6684919 0.6380938 0.8092867 #> attr(,\"label\") #> [1] \"Predicted values\" ( p <- predict(gm, test[,c(x, \"DISTANCE\")], back.transform = \"Miller\") ) #> Making population level predictions #> Miller back-transformation using:  #> \t\t  exp(sigma)*0.5*exp(y-hat)0.5*variance(y-hat),  #> \t\t  assumes normally distributed errors #>  [1] 0.8185825 0.8157111 0.7598341 0.7291901 0.7408247 0.6465580 0.7851909 #>  [8] 0.7703072 0.7589837 0.7108727 0.6947674 0.6582395 0.6769691 0.6493814 #> [15] 0.7936174 0.7179134 0.7070596 0.6526621 0.6203062 0.6159569 0.6234357 #> [22] 0.5851770 0.5831123 0.9411752 0.9192082 0.8158554 0.6788430 0.7118105 #> [29] 0.6767945 0.8694307 0.8247718 0.6654835 0.6769155 0.6751160 0.6136048 #> [36] 0.8526010 0.8431762 0.7110224 0.7084562 0.7209227 0.7191071 0.6533683 #> [43] 0.7629557 0.7546727 0.7084879 0.6982745 0.6889437 0.6796252 0.6456600 #> [50] 1.1001602 0.7741629 0.7345502 0.7066990 0.6958463 0.9311880 0.8558849 #> [57] 0.8467353 0.7972344 0.7669733 0.7844239 0.7410834 0.7013396 0.8389582 #> [64] 0.7946941 0.8067596 0.7511686 0.7470219 0.6840763 1.0047320 0.8978433 #> [71] 0.8398436 0.7544793 0.7272156 0.8305171 0.7305346 0.7315924 0.7146458 #> [78] 0.8890375 0.7079133 0.6920796 0.7008547 0.6878918 0.7263276 0.7144593 #> [85] 0.6845575 0.6684377 0.6696673 0.7001397 0.6683025 0.8476000 #> attr(,\"label\") #> [1] \"Predicted values\" ( p <- predict(gm, test[,c(x, \"DISTANCE\")], back.transform = \"Naihua\") ) #> Making population level predictions #> Naihua back-transformation using:  #> \t  y ~ exp(y-hat) regression with no intercept, #> \t  does not assume normally distributed errors #>  [1] 1.0073581 1.0038246 0.9350617 0.8973507 0.9116684 0.7956627 0.9662661 #>  [8] 0.9479500 0.9340152 0.8748092 0.8549898 0.8100380 0.8330870 0.7991371 #> [15] 0.9766359 0.8834735 0.8701167 0.8031744 0.7633569 0.7580045 0.7672080 #> [22] 0.7201264 0.7175855 1.1582224 1.1311895 1.0040022 0.8353929 0.8759632 #> [29] 0.8328721 1.0699327 1.0149748 0.8189526 0.8330209 0.8308064 0.7551099 #> [36] 1.0492218 1.0376236 0.8749934 0.8718353 0.8871768 0.8849425 0.8040435 #> [43] 0.9389032 0.9287099 0.8718744 0.8593056 0.8478230 0.8363555 0.7945576 #> [50] 1.3538714 0.9526948 0.9039470 0.8696730 0.8563175 1.1459320 1.0532630 #> [57] 1.0420034 0.9810869 0.9438472 0.9653221 0.9119869 0.8630776 1.0324328 #> [64] 0.9779608 0.9928088 0.9243977 0.9192948 0.8418331 1.2364362 1.1048976 #> [71] 1.0335223 0.9284720 0.8949209 1.0220451 0.8990053 0.9003070 0.8794523 #> [78] 1.0940611 0.8711673 0.8516821 0.8624808 0.8465286 0.8938281 0.8792228 #> [85] 0.8424253 0.8225880 0.8241012 0.8616010 0.8224217 1.0430675 #> attr(,\"label\") #> [1] \"Predicted values\"    # Using grouped data test <- nlme::groupedData(stats::as.formula(paste(paste(\"DPS\", 1, sep = \" ~ \"),            \"FROM_SITE\", sep = \" | \")),        data = test[,c(\"DPS\", \"FROM_SITE\", x, \"DISTANCE\")])  ( p <- predict(gm, test, groups = \"FROM_SITE\") ) #> Making group level (individual) predictions #> Warning: the condition has length > 1 and only the first element will be used #>           1           1           1           1           1           1  #> -0.23580292 -0.23931678 -0.31027689 -0.35144263 -0.33561304 -0.47171411  #>           2           2           2           2           2           2  #> -0.26035692 -0.27949437 -0.29430343 -0.35979039 -0.38270662 -0.43671496  #>           2           2           3           3           3           3  #> -0.40865812 -0.45026364 -0.28026281 -0.38051545 -0.39574934 -0.47580477  #>           3           3           3           3           3           4  #> -0.52665108 -0.53368738 -0.52161874 -0.58495000 -0.58848455 -0.08326620  #>           4           4           4           4           4           5  #> -0.10688291 -0.22615838 -0.41000568 -0.36258381 -0.41302777 -0.19139403  #>           5           5           5           5           5           6  #> -0.24412594 -0.45871879 -0.44168627 -0.44434819 -0.53988167 -0.19471307  #>           6           6           6           6           6           6  #> -0.20582871 -0.37630072 -0.37991650 -0.36247276 -0.36499442 -0.46086369  #>           7           7           7           7           7           7  #> -0.31953583 -0.33045173 -0.39360286 -0.40812358 -0.42157624 -0.43519436  #>           7           8           8           8           8           8  #> -0.48646275  0.02815312 -0.32327574 -0.37579964 -0.41445311 -0.42992916  #>           9           9           9           9           9           9  #> -0.14882454 -0.23314982 -0.24389762 -0.30413697 -0.34283373 -0.32033618  #>           9           9          10          10          10          10  #> -0.37717248 -0.43229342 -0.23965765 -0.29386129 -0.27879277 -0.35018844  #>          10          10          11          11          11          11  #> -0.35572396 -0.44374903 -0.05856053 -0.17104114 -0.23782105 -0.34500885  #>          11          12          12          12          12          13  #> -0.38181377 -0.28437744 -0.41264943 -0.41120251 -0.43463899 -0.14381295  #>          13          14          14          14          14          15  #> -0.37163075 -0.45239099 -0.43979142 -0.45846035 -0.40409086 -0.34431282  #>          15          16          16          17          18          19  #> -0.38706615 -0.51009474 -0.50825694 -0.41007320 -0.44716179          NA  #> attr(,\"label\") #> [1] \"Predicted values\"   rmse(back.transform(p), back.transform(ralu.model[,\"DPS\"][-sidx])) #> [1] NA  # Specify unconstrained gravity model (generally, not recommended)   ( gm <- gravity(y = \"DPS\", x = x, d = \"DISTANCE\", group = \"FROM_SITE\",                  data = train, ln = FALSE, constrained=TRUE) ) #> [1] \"Running singly-constrained gravity model\" #> Gravity model #>  #> Linear mixed-effects model fit by REML #>   Data: gdata  #>        AIC       BIC logLik #>   -136.514 -113.7206 77.257 #>  #> Random effects: #>  Formula: DPS ~ 1 | FROM_SITE #>         (Intercept)   Residual #> StdDev:  0.04331721 0.09251116 #>  #> Fixed effects:  list(fmla)  #>                 Value Std.Error DF   t-value p-value #> (Intercept) -5.021556 2.2138316 79 -2.268265  0.0260 #> DEPTH_F      0.016064 0.0142664 14  1.126013  0.2791 #> HLI_F        0.057311 0.2058492 14  0.278415  0.7848 #> CTI_F       -0.056346 0.0637005 14 -0.884544  0.3913 #> cti         -0.168146 0.0981068 79 -1.713907  0.0905 #> ffp          0.897728 0.2040685 79  4.399147  0.0000 #> DISTANCE    -0.125777 0.0154870 79 -8.121503  0.0000 #>  Correlation:  #>          (Intr) DEPTH_ HLI_F  CTI_F  cti    ffp    #> DEPTH_F  -0.626                                    #> HLI_F    -0.824  0.859                             #> CTI_F     0.330 -0.656 -0.560                      #> cti      -0.024  0.050  0.012 -0.128               #> ffp      -0.777  0.129  0.301  0.003 -0.138        #> DISTANCE -0.275  0.107  0.140 -0.050  0.464  0.164 #>  #> Standardized Within-Group Residuals: #>         Min          Q1         Med          Q3         Max  #> -2.96880469 -0.49096445  0.06522563  0.53632544  1.79390405  #>  #> Number of Observations: 100 #> Number of Groups: 18   ( p <- predict(gm, test[,c(x, \"DISTANCE\")]) ) #> Making population level predictions #> Warning: the condition has length > 1 and only the first element will be used #>  [1] -0.25329785 -0.25681171 -0.32777182 -0.36893756 -0.35310797 -0.48920904 #>  [7] -0.29494511 -0.31408256 -0.32889162 -0.39437858 -0.41729481 -0.47130315 #> [13] -0.44324631 -0.48485183 -0.28427044 -0.38452308 -0.39975697 -0.47981240 #> [19] -0.53065871 -0.53769501 -0.52562637 -0.58895763 -0.59249218 -0.11374265 #> [25] -0.13735936 -0.25663483 -0.44048213 -0.39306026 -0.44350423 -0.19303334 #> [31] -0.24576525 -0.46035810 -0.44332558 -0.44598750 -0.54152098 -0.21258035 #> [37] -0.22369599 -0.39416800 -0.39778379 -0.38034004 -0.38286170 -0.47873097 #> [43] -0.32367198 -0.33458788 -0.39773901 -0.41225972 -0.42571239 -0.43933051 #> [49] -0.49059890  0.04233915 -0.30908972 -0.36161362 -0.40026709 -0.41574314 #> [55] -0.12441081 -0.20873610 -0.21948389 -0.27972325 -0.31842001 -0.29592246 #> [61] -0.35275876 -0.40787969 -0.22871113 -0.28291477 -0.26784625 -0.33924191 #> [67] -0.34477744 -0.43280251 -0.04839582 -0.16087642 -0.22765633 -0.33484413 #> [73] -0.37164905 -0.23882341 -0.36709540 -0.36564847 -0.38908496 -0.17073254 #> [79] -0.39855034 -0.42117103 -0.40857146 -0.42724038 -0.37287089 -0.38934601 #> [85] -0.43209934 -0.45592882 -0.45409103 -0.40959210 -0.45613108 -0.21846319 #> attr(,\"label\") #> [1] \"Predicted values\"   rmse(back.transform(p), back.transform(ralu.model[,\"DPS\"][-sidx]))  #> [1] 0.0761695"},{"path":"/reference/print.gravity.html","id":null,"dir":"Reference","previous_headings":"","what":"Print gravity model — print.gravity","title":"Print gravity model — print.gravity","text":"summary method class \"gravity\"","code":""},{"path":"/reference/print.gravity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print gravity model — print.gravity","text":"","code":"# S3 method for gravity print(x, ...)"},{"path":"/reference/print.gravity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print gravity model — print.gravity","text":"x Object class gravity ... Ignored","code":""},{"path":"/reference/ralu.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Columbia spotted frog (Rana luteiventris) data for specifying gravity model. Note, the data.frame is already log transformed. — ralu.model","title":"Columbia spotted frog (Rana luteiventris) data for specifying gravity model. Note, the data.frame is already log transformed. — ralu.model","text":"Subset data used Murphy et al., (2010)","code":""},{"path":"/reference/ralu.model.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Columbia spotted frog (Rana luteiventris) data for specifying gravity model. Note, the data.frame is already log transformed. — ralu.model","text":"data.frame 190 rows (sites) 19 columns (covariates): ARMI_ID Unique ID FROM_SITE Unique site ID TO_SITE Unique site ID FST FST genetic distance DPS DPS genetic distance DISTANCE Graph edge distance DEPTH_F site water depth HLI_F Heat Load Index CTI_F Wetness Index DEPTH_T site water depth HLI_T Heat Load Index CTI_T Wetness Index hli Heat Load Index cti Wetness Index ffp Frost Free Period err27 Roughness 27x27 scale rsp Relative Slope Position ridge Percent Ridge Line hab_ratio Ratio suitable dispersal habitat","code":""},{"path":"/reference/ralu.model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Columbia spotted frog (Rana luteiventris) data for specifying gravity model. Note, the data.frame is already log transformed. — ralu.model","text":"Murphy M.., R. Dezzani, D.S. Pilliod & .S. Storfer (2010) Landscape genetics high mountain frog metapopulations. Molecular Ecology 19(17):3634-3649","code":""},{"path":"/reference/ralu.site.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset of site-level spatial point data for Columbia spotted frog (Rana luteiventris) — ralu.site","title":"Subset of site-level spatial point data for Columbia spotted frog (Rana luteiventris) — ralu.site","text":"Subset data used Murphy et al., (2010)","code":""},{"path":"/reference/ralu.site.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subset of site-level spatial point data for Columbia spotted frog (Rana luteiventris) — ralu.site","text":"SpatialPointsDataFrame 31 obs.  17 variables: SiteName Unique site name Drainage Source drainage Basin source basin Substrate Wetland substrate NWI USFWS NWI Wetland type AREA_m2 Area wetland PERI_m Perimeter wetland Depth_m Depth wetland TDS ... FISH Fish present ACB ... AUC ... AUCV ... AUCC ... AUF ... AWOOD ... AUFV ...","code":""},{"path":"/reference/ralu.site.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Subset of site-level spatial point data for Columbia spotted frog (Rana luteiventris) — ralu.site","text":"Murphy M.., R. Dezzani, D.S. Pilliod & .S. Storfer (2010) Landscape genetics high mountain frog metapopulations. Molecular Ecology 19(17):3634-3649","code":""},{"path":"/reference/rasters.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset of raster data for Columbia spotted frog (Rana luteiventris) — rasters","title":"Subset of raster data for Columbia spotted frog (Rana luteiventris) — rasters","text":"Subset data used Murphy et al., (2010)","code":""},{"path":"/reference/rasters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subset of raster data for Columbia spotted frog (Rana luteiventris) — rasters","text":"raster RasterStack: rows 426 columns 358 resoultion 30 meter projection \"+proj=utm +zone=11 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0\" cti Compound Topographic Index (\"wetness\") err27 Elevation Relief Ratio ffp Frost Free Period gsp Growing Season Precipitation hil Heat Load Index nlcd USGS Landcover","code":""},{"path":"/reference/rasters.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Subset of raster data for Columbia spotted frog (Rana luteiventris) — rasters","text":"Murphy M.., R. Dezzani, D.S. Pilliod & .S. Storfer (2010) Landscape genetics high mountain frog metapopulations. Molecular Ecology 19(17):3634-3649","code":""},{"path":"/reference/summary.gravity.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing Gravity Model Fits — summary.gravity","title":"Summarizing Gravity Model Fits — summary.gravity","text":"Summary method class \"gravity\".","code":""},{"path":"/reference/summary.gravity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing Gravity Model Fits — summary.gravity","text":"","code":"# S3 method for gravity summary(object, ...)"},{"path":"/reference/summary.gravity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing Gravity Model Fits — summary.gravity","text":"object Object class gravity ... Ignored","code":""},{"path":"/reference/summary.gravity.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Summarizing Gravity Model Fits — summary.gravity","text":"Summary lme lm gravity model, AIC, log likelihood Root Mean Square Error (RMSE) observed verses predicted","code":""}]
